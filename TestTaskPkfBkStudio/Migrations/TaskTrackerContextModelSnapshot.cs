// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTaskPkfBkStudio.Model;

#nullable disable

namespace TestTaskPkfBkStudio.Migrations
{
    [DbContext(typeof(TaskTrackerContext))]
    partial class TaskTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.18");

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.Role", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.Task", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("stateId")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("stateId");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.TaskList", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("taskId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("userId")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("taskId");

                    b.HasIndex("userId");

                    b.ToTable("taskList");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.TaskState", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("taskStates");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("roleId")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.Task", b =>
                {
                    b.HasOne("TestTaskPkfBkStudio.Model.TaskState", "state")
                        .WithMany()
                        .HasForeignKey("stateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("state");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.TaskList", b =>
                {
                    b.HasOne("TestTaskPkfBkStudio.Model.Task", "task")
                        .WithMany("tasks")
                        .HasForeignKey("taskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskPkfBkStudio.Model.User", "user")
                        .WithMany("tasks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("task");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.User", b =>
                {
                    b.HasOne("TestTaskPkfBkStudio.Model.Role", "role")
                        .WithMany("users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.Task", b =>
                {
                    b.Navigation("tasks");
                });

            modelBuilder.Entity("TestTaskPkfBkStudio.Model.User", b =>
                {
                    b.Navigation("tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
